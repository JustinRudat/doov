package ${package.name};

import java.util.List;
import java.util.ArrayList;

import javax.annotation.Generated;

import net.courtanet.ui.core.FieldID;
import net.courtanet.ui.core.FieldInfo;

/**
 * Enum is ordered by the field order of appearance in the UI.
 */
@Generated(value = "${source.generator.name}", comments="from ${process.class}")
public enum ${target.class.name} implements FieldInfo {
${literals}

    private final boolean isTransient;
    private final FieldID fieldId;
    private final Class<?> type;
    private final boolean codeValuable;
    private final boolean intValuable;
    private final FieldID[] siblings;

    ${target.class.name}(boolean isTransient, FieldID fieldId, Class<?> type, boolean codeValuable, boolean intValuable, FieldID... siblings) {
        this.isTransient = isTransient;
        this.fieldId = fieldId;
        this.type = type;
        this.codeValuable = codeValuable;
        this.intValuable = intValuable;
        this.siblings = siblings;
    }

    @Override
        public boolean isTransient() {
            return this.isTransient;
    }

    @Override
    public FieldID id() {
        return fieldId;
    }

    @Override
    public Class<?> type() {
        return type;
    }
    
    @Override
    public boolean isCodeValuable() {
    	return codeValuable;
    }

    @Override
    public boolean isIntValuable() {
    	return intValuable;
    }

    @Override
    public FieldInfo fromField(FieldID fieldID) {
        for (FieldInfo fieldInfo : values()) {
            if (fieldInfo.id().equals(fieldID)) {
                return fieldInfo;
            }
        }
        return null;
    }
    
    @Override
    public FieldID[] siblings() {
        return siblings;
    }
        
    /**
     * Usefull for parametrized tests
     */
    public static List<Object[]> allFields() {
        final List<Object[]> params = new ArrayList<Object[]>();
        for (FieldInfo fieldInfo : values())
            params.add(new Object[] { fieldInfo.id(), fieldInfo.type(), fieldInfo.isCodeValuable() });
        return params;
    }
    
    /**
     * Usefull for parametrized tests
     */
    public static List<Object[]> codeValuableFields() {
        final List<Object[]> params = new ArrayList<Object[]>();
        for (FieldInfo fieldInfo : values()) {
            if (!fieldInfo.isCodeValuable())
               continue;
            params.add(new Object[] { fieldInfo.id(), fieldInfo.type(), fieldInfo.isCodeValuable() });
        }
        return params;
    }
}