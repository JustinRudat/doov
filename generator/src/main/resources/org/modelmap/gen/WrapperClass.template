package ${package.name};

import javax.annotation.Generated;
import java.util.function.Function;
import java.util.function.BiConsumer;

import org.modelmap.core.FieldModel;
import org.modelmap.core.FieldId;
import org.modelmap.core.FieldInfo;
import ${target.field.info.package.name}.${target.field.info.class.name};

@Generated(value = "${source.generator.name}", comments="generated from ${process.class}")
public final class ${target.class.name} implements FieldModel {

    private final FieldInfo[] fieldInfos;
    private final ${target.model.class.name} model;

    public ${target.class.name}() {
        this(new ${target.model.class.name}());
    }

    public ${target.class.name}(${target.model.class.name} model) {
        this.fieldInfos = ${target.field.info.class.name}.values();
        this.model = model;
    }

    public ${target.model.class.name} getModel() {
        return model;
    }

    @Override
    public FieldInfo[] getFieldInfos() {
        return fieldInfos;
    }

    @Override
    public <T> T get(FieldId fieldId) {
${map.getter.if}        return null;
    }

${map.getter}

    @Override
    public <T> void set(FieldId fieldId, T value) {
${map.setter.if}    }

${map.setter}

    @SuppressWarnings("unchecked")
    private static enum ${target.model.class.name}Property {
${map.properties}
        ;

        private final FieldId fieldId;

        ${target.model.class.name}Property(FieldId fieldId) {
            this.fieldId = fieldId;
        }

        public FieldId fieldId() {
            return fieldId;
        }

        public abstract <T> BiConsumer<SampleModel, T> consumer();

        public abstract <T> Function<SampleModel, T> supplier();
    }

}